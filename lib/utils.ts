import { type ClassValue, clsx } from "clsx";
import { twMerge } from "tailwind-merge";

// generated by shadcn
export function cn(...inputs: ClassValue[]) {
  return twMerge(clsx(inputs));
}

// created by chatgpt
//determines whether a given string is a valid base64-encoded image data URL.
// It uses a regular expression (base64Regex) to check if the provided imageData starts with a valid data URL format for image types like PNG, JPEG, GIF, or WebP.
// This function can be used to validate if a given string is a base64-encoded image data URL.
export function isBase64Image(imageData: string) { //as a string or blob 
  const base64Regex = /^data:image\/(png|jpe?g|gif|webp);base64,/;
  return base64Regex.test(imageData);
}

// created by chatgpt

//This function takes a dateString representing a date and time and formats it in a user-friendly manner.
//It converts the input dateString into a Date object and then formats the date part using a specific set of options for year, month, and day.
// Additionally, it formats the time part using hour and minute formatting options.
//The function returns a formatted string in the format: HH:mm - Mon DD, YYYY (e.g., 10:30 AM - Aug 18, 2023).
export function formatDateString(dateString: string) {
  const options: Intl.DateTimeFormatOptions = {
    year: "numeric",
    month: "short",
    day: "numeric",
  };

  const date = new Date(dateString);
  const formattedDate = date.toLocaleDateString(undefined, options);

  const time = date.toLocaleTimeString([], {
    hour: "numeric",
    minute: "2-digit",
  });

  return `${time} - ${formattedDate}`;
}

// created by chatgpt

//This function takes a numeric count representing the number of threads and returns a formatted string indicating the thread count.
// If the count is 0, the function returns "No Threads". 
//Otherwise, it formats the count as a two-digit string, and based on whether the count is 1 or not, it returns a string like "XX Threads" or "XX Thread", where XX represents the padded count. 
//This function is useful for displaying thread counts in a user-friendly format.
export function formatThreadCount(count: number): string {
  if (count === 0) {
    return "No Threads";
  } else {
    const threadCount = count.toString().padStart(2, "0");
    const threadWord = count === 1 ? "Thread" : "Threads";
    return `${threadCount} ${threadWord}`;
  }
}
